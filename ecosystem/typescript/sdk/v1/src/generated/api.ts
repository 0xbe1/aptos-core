/* tslint:disable */
/* eslint-disable */
/**
 * Aptos Node API
 * The Aptos Node API is a RESTful API for client applications to interact with the Aptos blockchain.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AccountData
 */
export interface AccountData {
    /**
     * 
     * @type {number}
     * @memberof AccountData
     */
    'sequence_number': number;
    /**
     * 
     * @type {any}
     * @memberof AccountData
     */
    'authentication_key': any;
}
/**
 * The struct holding all data returned to the client by the index endpoint (i.e., GET \"/\").
 * @export
 * @interface IndexResponse
 */
export interface IndexResponse {
    /**
     * 
     * @type {number}
     * @memberof IndexResponse
     */
    'chain_id': number;
    /**
     * 
     * @type {number}
     * @memberof IndexResponse
     */
    'epoch': number;
    /**
     * 
     * @type {number}
     * @memberof IndexResponse
     */
    'ledger_version': number;
    /**
     * 
     * @type {number}
     * @memberof IndexResponse
     */
    'oldest_ledger_version': number;
    /**
     * 
     * @type {number}
     * @memberof IndexResponse
     */
    'ledger_timestamp': number;
    /**
     * 
     * @type {RoleType}
     * @memberof IndexResponse
     */
    'node_role': RoleType;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const RoleType = {
    Validator: 'Validator',
    FullNode: 'FullNode'
} as const;

export type RoleType = typeof RoleType[keyof typeof RoleType];



/**
 * GeneralApi - axios parameter creator
 * @export
 */
export const GeneralApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Return high level information about an account such as its sequence number.
         * @summary get_account
         * @param {string} address 
         * @param {number} [ledgerVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccount: async (address: string, ledgerVersion?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('getAccount', 'address', address)
            const localVarPath = `/accounts/{address}`
                .replace(`{${"address"}}`, encodeURIComponent(String(address)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ledgerVersion !== undefined) {
                localVarQueryParameter['ledger_version'] = ledgerVersion;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the latest ledger information, including data such as chain ID, role type, ledger versions, epoch, etc.
         * @summary Get ledger info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLedgerInfo: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides a UI that you can use to explore the API. You can also retrieve the API directly at `/openapi.yaml` and `/openapi.json`.
         * @summary Show OpenAPI explorer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openapi: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/openapi`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GeneralApi - functional programming interface
 * @export
 */
export const GeneralApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GeneralApiAxiosParamCreator(configuration)
    return {
        /**
         * Return high level information about an account such as its sequence number.
         * @summary get_account
         * @param {string} address 
         * @param {number} [ledgerVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccount(address: string, ledgerVersion?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccount(address, ledgerVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the latest ledger information, including data such as chain ID, role type, ledger versions, epoch, etc.
         * @summary Get ledger info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLedgerInfo(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IndexResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLedgerInfo(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Provides a UI that you can use to explore the API. You can also retrieve the API directly at `/openapi.yaml` and `/openapi.json`.
         * @summary Show OpenAPI explorer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async openapi(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.openapi(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GeneralApi - factory interface
 * @export
 */
export const GeneralApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GeneralApiFp(configuration)
    return {
        /**
         * Return high level information about an account such as its sequence number.
         * @summary get_account
         * @param {string} address 
         * @param {number} [ledgerVersion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccount(address: string, ledgerVersion?: number, options?: any): AxiosPromise<AccountData> {
            return localVarFp.getAccount(address, ledgerVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the latest ledger information, including data such as chain ID, role type, ledger versions, epoch, etc.
         * @summary Get ledger info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLedgerInfo(options?: any): AxiosPromise<IndexResponse> {
            return localVarFp.getLedgerInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * Provides a UI that you can use to explore the API. You can also retrieve the API directly at `/openapi.yaml` and `/openapi.json`.
         * @summary Show OpenAPI explorer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openapi(options?: any): AxiosPromise<string> {
            return localVarFp.openapi(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GeneralApi - object-oriented interface
 * @export
 * @class GeneralApi
 * @extends {BaseAPI}
 */
export class GeneralApi extends BaseAPI {
    /**
     * Return high level information about an account such as its sequence number.
     * @summary get_account
     * @param {string} address 
     * @param {number} [ledgerVersion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralApi
     */
    public getAccount(address: string, ledgerVersion?: number, options?: AxiosRequestConfig) {
        return GeneralApiFp(this.configuration).getAccount(address, ledgerVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the latest ledger information, including data such as chain ID, role type, ledger versions, epoch, etc.
     * @summary Get ledger info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralApi
     */
    public getLedgerInfo(options?: AxiosRequestConfig) {
        return GeneralApiFp(this.configuration).getLedgerInfo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides a UI that you can use to explore the API. You can also retrieve the API directly at `/openapi.yaml` and `/openapi.json`.
     * @summary Show OpenAPI explorer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralApi
     */
    public openapi(options?: AxiosRequestConfig) {
        return GeneralApiFp(this.configuration).openapi(options).then((request) => request(this.axios, this.basePath));
    }
}


